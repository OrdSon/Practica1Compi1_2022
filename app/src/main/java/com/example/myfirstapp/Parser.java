//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------
package com.example.myfirstapp;

import java_cup.runtime.*;

/**
 * CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class Parser extends lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public Parser() {
        super();
    }

    public GeneradorDeGrafica getGenerador() {
        return generador;
    }

    public void setGenerador(GeneradorDeGrafica generador) {
        this.generador = generador;
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public Parser(Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public Parser(Scanner s, SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\076\000\002\002\004\000\002\020\005\000\002\020"
        + "\004\000\002\020\004\000\002\020\003\000\002\021\005"
        + "\000\002\021\005\000\002\021\004\000\002\021\004\000"
        + "\002\021\004\000\002\022\004\000\002\022\004\000\002"
        + "\022\004\000\002\022\004\000\002\022\003\000\002\023"
        + "\004\000\002\023\004\000\002\023\004\000\002\023\004"
        + "\000\002\023\004\000\002\023\004\000\002\023\004\000"
        + "\002\023\003\000\002\031\004\000\002\032\006\000\002"
        + "\027\003\000\002\030\003\000\002\002\006\000\002\004"
        + "\006\000\002\005\005\000\002\005\005\000\002\006\006"
        + "\000\002\007\005\000\002\033\002\000\002\007\006\000"
        + "\002\007\005\000\002\007\005\000\002\007\005\000\002"
        + "\007\005\000\002\010\006\000\002\011\011\000\002\011"
        + "\011\000\002\012\006\000\002\012\006\000\002\013\006"
        + "\000\002\014\005\000\002\014\005\000\002\015\006\000"
        + "\002\016\005\000\002\016\005\000\002\003\006\000\002"
        + "\017\006\000\002\024\004\000\002\024\003\000\002\034"
        + "\002\000\002\025\005\000\002\026\005\000\002\026\005"
        + "\000\002\026\005\000\002\026\005\000\002\026\003\000"
        + "\002\026\005"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\221\000\006\034\005\035\004\001\002\000\010\003"
        + "\020\021\021\022\023\001\002\000\004\012\013\001\002"
        + "\000\004\002\011\001\002\000\010\002\ufffd\034\005\035"
        + "\004\001\002\000\004\002\ufffe\001\002\000\004\002\001"
        + "\001\002\000\010\002\uffea\034\uffea\035\uffea\001\002\000"
        + "\004\040\014\001\002\000\004\013\015\001\002\000\004"
        + "\016\016\001\002\000\010\002\uffe9\034\uffe9\035\uffe9\001"
        + "\002\000\004\010\143\001\002\000\010\011\141\013\142"
        + "\016\140\001\002\000\004\010\uffe8\001\002\000\004\010"
        + "\026\001\002\000\004\010\uffe7\001\002\000\010\002\uffff"
        + "\034\005\035\004\001\002\000\004\002\000\001\002\000"
        + "\014\011\027\023\031\024\034\025\033\033\040\001\002"
        + "\000\010\002\ufff3\034\ufff3\035\ufff3\001\002\000\014\011"
        + "\027\023\031\024\034\025\033\033\040\001\002\000\004"
        + "\017\134\001\002\000\014\011\027\023\031\024\034\025"
        + "\033\033\040\001\002\000\004\017\067\001\002\000\004"
        + "\017\057\001\002\000\014\011\027\023\031\024\034\025"
        + "\033\033\040\001\002\000\014\011\027\023\031\024\034"
        + "\025\033\033\040\001\002\000\010\002\ufffc\034\ufffc\035"
        + "\ufffc\001\002\000\004\017\041\001\002\000\004\014\042"
        + "\001\002\000\004\010\043\001\002\000\004\043\045\001"
        + "\002\000\026\011\uffda\023\uffda\024\uffda\025\uffda\026\uffda"
        + "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\001\002\000"
        + "\004\020\046\001\002\000\004\043\047\001\002\000\004"
        + "\011\050\001\002\000\006\015\052\020\051\001\002\000"
        + "\004\010\043\001\002\000\004\016\053\001\002\000\026"
        + "\011\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030"
        + "\uffd8\031\uffd8\032\uffd8\033\uffd8\001\002\000\026\011\uffd9"
        + "\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031"
        + "\uffd9\032\uffd9\033\uffd9\001\002\000\010\002\ufff5\034\ufff5"
        + "\035\ufff5\001\002\000\010\002\ufff4\034\ufff4\035\ufff4\001"
        + "\002\000\004\014\060\001\002\000\004\040\062\001\002"
        + "\000\014\011\uffe5\023\uffe5\024\uffe5\025\uffe5\033\uffe5\001"
        + "\002\000\006\015\064\020\063\001\002\000\004\040\062"
        + "\001\002\000\004\016\065\001\002\000\014\011\uffe3\023"
        + "\uffe3\024\uffe3\025\uffe3\033\uffe3\001\002\000\014\011\uffe4"
        + "\023\uffe4\024\uffe4\025\uffe4\033\uffe4\001\002\000\004\014"
        + "\070\001\002\000\010\012\074\041\077\043\071\001\002"
        + "\000\020\004\uffc5\005\uffc5\006\uffc5\007\uffc5\015\127\016"
        + "\uffc5\020\126\001\002\000\014\011\uffe2\023\uffe2\024\uffe2"
        + "\025\uffe2\033\uffe2\001\002\000\012\012\uffcc\015\uffcc\020"
        + "\uffcc\043\uffcc\001\002\000\006\012\074\043\111\001\002"
        + "\000\012\012\074\015\121\020\117\043\111\001\002\000"
        + "\014\004\104\005\106\006\110\007\107\016\uffcb\001\002"
        + "\000\006\015\101\020\100\001\002\000\010\012\074\041"
        + "\077\043\071\001\002\000\004\016\102\001\002\000\014"
        + "\011\uffdd\023\uffdd\024\uffdd\025\uffdd\033\uffdd\001\002\000"
        + "\014\011\uffe1\023\uffe1\024\uffe1\025\uffe1\033\uffe1\001\002"
        + "\000\006\012\074\043\111\001\002\000\004\016\115\001"
        + "\002\000\006\012\074\043\111\001\002\000\006\012\074"
        + "\043\111\001\002\000\006\012\074\043\111\001\002\000"
        + "\016\004\uffc5\005\uffc5\006\uffc5\007\uffc5\013\uffc5\016\uffc5"
        + "\001\002\000\016\004\uffc7\005\uffc7\006\uffc7\007\uffc7\013"
        + "\uffc7\016\uffc7\001\002\000\016\004\uffc6\005\uffc6\006\uffc6"
        + "\007\uffc6\013\uffc6\016\uffc6\001\002\000\016\004\uffc9\005"
        + "\uffc9\006\110\007\107\013\uffc9\016\uffc9\001\002\000\012"
        + "\012\uffca\015\uffca\020\uffca\043\uffca\001\002\000\016\004"
        + "\uffc8\005\uffc8\006\110\007\107\013\uffc8\016\uffc8\001\002"
        + "\000\010\012\074\041\077\043\071\001\002\000\012\012"
        + "\uffcd\015\uffcd\020\uffcd\043\uffcd\001\002\000\004\016\122"
        + "\001\002\000\014\011\uffdb\023\uffdb\024\uffdb\025\uffdb\033"
        + "\uffdb\001\002\000\014\011\uffde\023\uffde\024\uffde\025\uffde"
        + "\033\uffde\001\002\000\014\004\104\005\106\006\110\007"
        + "\107\013\125\001\002\000\016\004\uffc4\005\uffc4\006\uffc4"
        + "\007\uffc4\013\uffc4\016\uffc4\001\002\000\010\012\uffe0\041"
        + "\uffe0\043\uffe0\001\002\000\004\016\130\001\002\000\014"
        + "\011\uffdc\023\uffdc\024\uffdc\025\uffdc\033\uffdc\001\002\000"
        + "\010\012\074\041\077\043\071\001\002\000\014\011\uffdf"
        + "\023\uffdf\024\uffdf\025\uffdf\033\uffdf\001\002\000\010\002"
        + "\ufff7\034\ufff7\035\ufff7\001\002\000\004\040\135\001\002"
        + "\000\004\016\136\001\002\000\026\011\uffe6\023\uffe6\024"
        + "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6"
        + "\033\uffe6\001\002\000\010\002\ufff6\034\ufff6\035\ufff6\001"
        + "\002\000\010\002\ufffa\034\ufffa\035\ufffa\001\002\000\010"
        + "\002\ufff9\034\ufff9\035\ufff9\001\002\000\010\002\ufff8\034"
        + "\ufff8\035\ufff8\001\002\000\022\011\144\023\031\026\152"
        + "\027\154\030\151\031\160\032\153\033\040\001\002\000"
        + "\010\002\uffeb\034\uffeb\035\uffeb\001\002\000\022\011\144"
        + "\023\031\026\152\027\154\030\151\031\160\032\153\033"
        + "\040\001\002\000\022\011\144\023\031\026\152\027\154"
        + "\030\151\031\160\032\153\033\040\001\002\000\022\011"
        + "\144\023\031\026\152\027\154\030\151\031\160\032\153"
        + "\033\040\001\002\000\022\011\144\023\031\026\152\027"
        + "\154\030\151\031\160\032\153\033\040\001\002\000\004"
        + "\017\215\001\002\000\004\017\205\001\002\000\004\017"
        + "\175\001\002\000\004\017\170\001\002\000\022\011\144"
        + "\023\031\026\152\027\154\030\151\031\160\032\153\033"
        + "\040\001\002\000\022\011\144\023\031\026\152\027\154"
        + "\030\151\031\160\032\153\033\040\001\002\000\010\002"
        + "\ufffb\034\ufffb\035\ufffb\001\002\000\004\017\163\001\002"
        + "\000\022\011\144\023\031\026\152\027\154\030\151\031"
        + "\160\032\153\033\040\001\002\000\010\002\ufff1\034\ufff1"
        + "\035\ufff1\001\002\000\004\040\164\001\002\000\004\016"
        + "\165\001\002\000\022\011\uffce\023\uffce\026\uffce\027\uffce"
        + "\030\uffce\031\uffce\032\uffce\033\uffce\001\002\000\010\002"
        + "\uffee\034\uffee\035\uffee\001\002\000\010\002\uffed\034\uffed"
        + "\035\uffed\001\002\000\006\036\172\037\171\001\002\000"
        + "\004\016\174\001\002\000\004\016\173\001\002\000\022"
        + "\011\uffd6\023\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032"
        + "\uffd6\033\uffd6\001\002\000\022\011\uffd7\023\uffd7\026\uffd7"
        + "\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\001\002\000"
        + "\004\014\176\001\002\000\004\043\177\001\002\000\006"
        + "\015\202\020\201\001\002\000\022\011\uffd2\023\uffd2\026"
        + "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\001\002"
        + "\000\004\043\177\001\002\000\004\016\203\001\002\000"
        + "\022\011\uffd0\023\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0"
        + "\032\uffd0\033\uffd0\001\002\000\022\011\uffd1\023\uffd1\026"
        + "\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\001\002"
        + "\000\004\014\206\001\002\000\004\040\207\001\002\000"
        + "\006\015\212\020\211\001\002\000\022\011\uffd5\023\uffd5"
        + "\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\001"
        + "\002\000\004\040\207\001\002\000\004\016\213\001\002"
        + "\000\022\011\uffd3\023\uffd3\026\uffd3\027\uffd3\030\uffd3\031"
        + "\uffd3\032\uffd3\033\uffd3\001\002\000\022\011\uffd4\023\uffd4"
        + "\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\001"
        + "\002\000\004\043\216\001\002\000\004\016\217\001\002"
        + "\000\022\011\uffcf\023\uffcf\026\uffcf\027\uffcf\030\uffcf\031"
        + "\uffcf\032\uffcf\033\uffcf\001\002\000\010\002\uffec\034\uffec"
        + "\035\uffec\001\002\000\010\002\uffef\034\uffef\035\uffef\001"
        + "\002\000\010\002\ufff2\034\ufff2\035\ufff2\001\002\000\010"
        + "\002\ufff0\034\ufff0\035\ufff0\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\221\000\006\020\005\031\006\001\001\000\010\021"
        + "\023\027\021\030\016\001\001\000\004\032\011\001\001"
        + "\000\002\001\001\000\006\020\007\031\006\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\006\020\024\031"
        + "\006\001\001\000\002\001\001\000\014\002\035\004\031"
        + "\006\027\010\034\022\036\001\001\000\002\001\001\000"
        + "\014\002\035\004\031\006\027\010\034\022\136\001\001"
        + "\000\002\001\001\000\014\002\035\004\031\006\027\010"
        + "\034\022\132\001\001\000\002\001\001\000\002\001\001"
        + "\000\014\002\035\004\031\006\027\010\034\022\055\001"
        + "\001\000\014\002\035\004\031\006\027\010\034\022\054"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\004\011\043\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\011\053\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\004\005\060"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\005"
        + "\065\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\012\007\071\024\074\025"
        + "\072\026\075\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\004\026\123\001\001\000\006\025"
        + "\117\026\075\001\001\000\004\034\104\001\001\000\002"
        + "\001\001\000\012\007\102\024\074\025\072\026\075\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\004\026\115\001\001\000\002\001\001\000\004\026"
        + "\113\001\001\000\004\026\112\001\001\000\004\026\111"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\012\007\122\024\074\025\072\026\075\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\033"
        + "\130\001\001\000\002\001\001\000\002\001\001\000\012"
        + "\007\131\024\074\025\072\026\075\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\022\002\147\003\154"
        + "\010\146\012\145\013\160\015\144\017\155\023\156\001"
        + "\001\000\002\001\001\000\022\002\147\003\154\010\146"
        + "\012\145\013\160\015\144\017\155\023\222\001\001\000"
        + "\022\002\147\003\154\010\146\012\145\013\160\015\144"
        + "\017\155\023\221\001\001\000\022\002\147\003\154\010"
        + "\146\012\145\013\160\015\144\017\155\023\220\001\001"
        + "\000\022\002\147\003\154\010\146\012\145\013\160\015"
        + "\144\017\155\023\217\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\022\002"
        + "\147\003\154\010\146\012\145\013\160\015\144\017\155"
        + "\023\166\001\001\000\022\002\147\003\154\010\146\012"
        + "\145\013\160\015\144\017\155\023\165\001\001\000\002"
        + "\001\001\000\002\001\001\000\022\002\147\003\154\010"
        + "\146\012\145\013\160\015\144\017\155\023\161\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\004\016\177"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\016"
        + "\203\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\014\207\001\001\000"
        + "\002\001\001\000\002\001\001\000\004\014\213\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$Parser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$Parser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public Symbol do_action(
            int act_num,
            lr_parser parser,
            java.util.Stack stack,
            int top)
            throws Exception {
        /* call code in generated class */
        return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    //setear el analizador lexico aqui:
    private Symbol s;
    GeneradorDeGrafica generador = new GeneradorDeGrafica();

    public Parser(Lexer lexer) {
        super(lexer);
    }

    public Symbol getS() {
        return this.s;
    }

    public void report_error(String message, Object info) {
        System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        generador.addMistake(new Mistake(sym.terminalNames[cur_token.sym], cur_token.left + "", cur_token.right + "", "Sintactico"));
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        generador.addMistake(new Mistake(sym.terminalNames[cur_token.sym], cur_token.left + "", cur_token.right + "", "Sintactico"));
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        generador.addMistake(new Mistake(sym.terminalNames[cur_token.sym], cur_token.left + "", cur_token.right + "", "Sintactico"));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.out.println("public void unrecoveredsyntax_error");
        } else {
            System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
            System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
            generador.addMistake(new Mistake(sym.terminalNames[cur_token.sym], cur_token.left + "", cur_token.right + "", "Sintactico"));
        }
    }

    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$Parser$actions {

        //poner codigo para realizar acciones
        private final Parser parser;

        /**
         * Constructor
         */
        CUP$Parser$actions(Parser parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final Symbol CUP$Parser$do_action_part00000000(
                int CUP$Parser$act_num,
                lr_parser CUP$Parser$parser,
                java.util.Stack CUP$Parser$stack,
                int CUP$Parser$top)
                throws Exception {
            /* Symbol object for return from actions */
            Symbol CUP$Parser$result;

            /* select the action based on the action number */
            switch (CUP$Parser$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= S1A EOF 
                {
                    Object RESULT = null;
                    int start_valleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int start_valright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    Object start_val = (Object) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = start_val;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$Parser$parser.done_parsing();
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // S1A ::= DEF S2A S1A 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S1A", 14, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // S1A ::= DEF S2A 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S1A", 14, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // S1A ::= EJ S1A 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S1A", 14, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // S1A ::= EJ 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S1A", 14, ((Symbol) CUP$Parser$stack.peek()), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // S2A ::= barras OPENBRACE S3A 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S2A", 15, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // S2A ::= pie OPENBRACE S5A 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S2A", 15, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // S2A ::= error SEMICOLON 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S2A", 15, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // S2A ::= error CLOSEBRACE 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S2A", 15, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // S2A ::= error CLOSEPAR 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S2A", 15, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // S3A ::= EX S3A 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S3A", 16, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // S3A ::= EY S3A 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S3A", 16, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // S3A ::= T S3A 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S3A", 16, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // S3A ::= U S3A 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S3A", 16, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // S3A ::= CLOSEBRACE 
                {
                    Object RESULT = null;
                    generador.create();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S3A", 16, ((Symbol) CUP$Parser$stack.peek()), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // S5A ::= TP S5A 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S5A", 17, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // S5A ::= EE S5A 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S5A", 17, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // S5A ::= V S5A 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S5A", 17, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // S5A ::= U S5A 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S5A", 17, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // S5A ::= EXT S5A 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S5A", 17, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // S5A ::= TTL S5A 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S5A", 17, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // S5A ::= T S5A 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S5A", 17, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // S5A ::= CLOSEBRACE 
                {
                    Object RESULT = null;
                    generador.create();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S5A", 17, ((Symbol) CUP$Parser$stack.peek()), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // EJ ::= RUN S1B 
                {
                    String RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("EJ", 23, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // S1B ::= OPENPAR IDENTIFICADOR CLOSEPAR SEMICOLON 
                {
                    String RESULT = null;
                    int nleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int nright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String n = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    generador.addEjecucion(n);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S1B", 24, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // barras ::= BARRAS 
                {
                    String RESULT = null;
                    generador.setTipoBarras();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("barras", 21, ((Symbol) CUP$Parser$stack.peek()), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // pie ::= PIE 
                {
                    String RESULT = null;
                    generador.setTipoPie();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("pie", 22, ((Symbol) CUP$Parser$stack.peek()), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // T ::= TITULO COLON IDENTIFICADOR SEMICOLON 
                {
                    Object RESULT = null;
                    int titleleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int titleright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String title = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    generador.setTitulo(title);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("T", 0, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // EX ::= EJEX COLON OPENBRACKET S6 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("EX", 2, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // S6 ::= IDENTIFICADOR COMA S6 
                {
                    Object RESULT = null;
                    int idleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int idright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String id = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    generador.addXElement(id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S6", 3, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // S6 ::= IDENTIFICADOR CLOSEBRACKET SEMICOLON 
                {
                    Object RESULT = null;
                    int idleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int idright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String id = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    generador.addXElement(id);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S6", 3, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // EY ::= EJEY COLON OPENBRACKET S7 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("EY", 4, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // S7 ::= DECIMAL COMA S7 
                {
                    Object RESULT = null;
                    int decimalleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int decimalright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String decimal = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    generador.addYElement(decimal);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S7", 5, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // NT$0 ::= 
                {
                    Object RESULT = null;
                    int nleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int nright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String n = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    generador.addYElement(n);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0", 25, ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // S7 ::= NUMERO COMA NT$0 S7 
                {
                    Object RESULT = null;
                    // propagate RESULT from NT$0
                    RESULT = (Object) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int nleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int nright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    String n = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S7", 5, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // S7 ::= expr_list COMA S7 
                {
                    Object RESULT = null;
                    int eleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int eright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String e = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    generador.addYElement(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S7", 5, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // S7 ::= DECIMAL CLOSEBRACKET SEMICOLON 
                {
                    Object RESULT = null;
                    int decimalleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int decimalright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String decimal = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    generador.addYElement(decimal);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S7", 5, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // S7 ::= NUMERO CLOSEBRACKET SEMICOLON 
                {
                    Object RESULT = null;
                    int nleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int nright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String n = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    generador.addYElement(n);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S7", 5, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // S7 ::= expr_list CLOSEBRACKET SEMICOLON 
                {
                    Object RESULT = null;
                    int eleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int eright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String e = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    generador.addYElement(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S7", 5, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // U ::= UNIR COLON OPENBRACKET S8 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("U", 6, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // S8 ::= OPENBRACE NUMERO COMA NUMERO CLOSEBRACE COMA S8 
                {
                    Object RESULT = null;
                    int xleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                    int xright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                    String x = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    int yleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int yright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    String y = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    generador.addUnion(x, y);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S8", 7, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // S8 ::= OPENBRACE NUMERO COMA NUMERO CLOSEBRACE CLOSEBRACKET SEMICOLON 
                {
                    Object RESULT = null;
                    int xleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).left;
                    int xright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).right;
                    String x = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 5)).value;
                    int yleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;
                    int yright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;
                    String y = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;
                    generador.addUnion(x, y);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S8", 7, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 6)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // TP ::= TIPO COLON CANTIDAD SEMICOLON 
                {
                    Object RESULT = null;
                    generador.setTipoCantidad();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("TP", 8, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // TP ::= TIPO COLON PORCENTAJE SEMICOLON 
                {
                    Object RESULT = null;
                    generador.setTipoPorcentaje();
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("TP", 8, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // EE ::= TAG COLON OPENBRACKET S9 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("EE", 9, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // S9 ::= IDENTIFICADOR COMA S9 
                {
                    Object RESULT = null;
                    int tagleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int tagright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String tag = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    generador.addTag(tag);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S9", 10, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // S9 ::= IDENTIFICADOR CLOSEBRACKET SEMICOLON 
                {
                    Object RESULT = null;
                    int tagleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int tagright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String tag = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    generador.addTag(tag);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S9", 10, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // V ::= VALORES COLON OPENBRACKET S10 
                {
                    Object RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("V", 11, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 48: // S10 ::= NUMERO COMA S10 
                {
                    Object RESULT = null;
                    int valleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int valright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String val = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    generador.addValue(val);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S10", 12, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 49: // S10 ::= NUMERO CLOSEBRACKET SEMICOLON 
                {
                    Object RESULT = null;
                    int valleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int valright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String val = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    generador.addValue(val);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("S10", 12, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 50: // TTL ::= TOTAL COLON NUMERO SEMICOLON 
                {
                    Object RESULT = null;
                    int valleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int valright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String val = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    generador.setTotal(val);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("TTL", 1, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 51: // EXT ::= EXTRA COLON IDENTIFICADOR SEMICOLON 
                {
                    Object RESULT = null;
                    int eleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int eright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String e = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    generador.setExtraName(e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXT", 13, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 3)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 52: // expr_list ::= expr_list expr_part 
                {
                    String RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list", 18, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 53: // expr_list ::= expr_part 
                {
                    String RESULT = null;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list", 18, ((Symbol) CUP$Parser$stack.peek()), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 54: // NT$1 ::= 
                {
                    String RESULT = null;
                    int eleft = ((Symbol) CUP$Parser$stack.peek()).left;
                    int eright = ((Symbol) CUP$Parser$stack.peek()).right;
                    String e = (String) ((Symbol) CUP$Parser$stack.peek()).value;
                    System.out.println("= " + e);
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1", 26, ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 55: // expr_part ::= expr NT$1 SEMICOLON 
                {
                    String RESULT = null;
                    // propagate RESULT from NT$1
                    RESULT = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    int eleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int eright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String e = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;

                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_part", 19, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 56: // expr ::= expr SUMA expr 
                {
                    String RESULT = null;
                    int e1left = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String e1 = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((Symbol) CUP$Parser$stack.peek()).right;
                    String e2 = (String) ((Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e1 + e2;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 20, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 57: // expr ::= expr RESTA expr 
                {
                    String RESULT = null;
                    int e1left = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String e1 = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((Symbol) CUP$Parser$stack.peek()).right;
                    String e2 = (String) ((Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e1 + e2;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 20, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 58: // expr ::= expr MULTI expr 
                {
                    String RESULT = null;
                    int e1left = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String e1 = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((Symbol) CUP$Parser$stack.peek()).right;
                    String e2 = (String) ((Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e1 + e2;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 20, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 59: // expr ::= expr DIV expr 
                {
                    String RESULT = null;
                    int e1left = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;
                    int e1right = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;
                    String e1 = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;
                    int e2left = ((Symbol) CUP$Parser$stack.peek()).left;
                    int e2right = ((Symbol) CUP$Parser$stack.peek()).right;
                    String e2 = (String) ((Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = e1 + e2;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 20, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 60: // expr ::= NUMERO 
                {
                    String RESULT = null;
                    int nleft = ((Symbol) CUP$Parser$stack.peek()).left;
                    int nright = ((Symbol) CUP$Parser$stack.peek()).right;
                    String n = (String) ((Symbol) CUP$Parser$stack.peek()).value;
                    RESULT = n;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 20, ((Symbol) CUP$Parser$stack.peek()), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 61: // expr ::= OPENPAR expr CLOSEPAR 
                {
                    String RESULT = null;
                    int eleft = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;
                    int eright = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;
                    String e = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;
                    RESULT = e;
                    CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr", 20, ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)), ((Symbol) CUP$Parser$stack.peek()), RESULT);
                }
                return CUP$Parser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$Parser$act_num + "found in internal parse table");

            }
        }

        /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final Symbol CUP$Parser$do_action(
                int CUP$Parser$act_num,
                lr_parser CUP$Parser$parser,
                java.util.Stack CUP$Parser$stack,
                int CUP$Parser$top)
                throws Exception {
            return CUP$Parser$do_action_part00000000(
                    CUP$Parser$act_num,
                    CUP$Parser$parser,
                    CUP$Parser$stack,
                    CUP$Parser$top);
        }
    }

}
