
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.myfirstapp;

import java_cup.runtime.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\020\005\000\002\020" +
    "\004\000\002\021\005\000\002\021\005\000\002\022\004" +
    "\000\002\022\004\000\002\022\004\000\002\022\004\000" +
    "\002\022\003\000\002\023\004\000\002\023\004\000\002" +
    "\023\004\000\002\023\004\000\002\023\004\000\002\023" +
    "\004\000\002\023\004\000\002\023\003\000\002\002\006" +
    "\000\002\004\006\000\002\005\005\000\002\005\005\000" +
    "\002\006\006\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\010\006\000\002\011" +
    "\011\000\002\011\011\000\002\012\006\000\002\012\006" +
    "\000\002\013\006\000\002\014\005\000\002\014\005\000" +
    "\002\015\006\000\002\016\005\000\002\016\005\000\002" +
    "\003\006\000\002\017\006\000\002\024\004\000\002\024" +
    "\003\000\002\027\002\000\002\025\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\003\000\002\026\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\004\035\004\001\002\000\006\021\007\022" +
    "\010\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\010\115\001\002\000\004\010\013\001" +
    "\002\000\006\002\uffff\035\004\001\002\000\004\002\000" +
    "\001\002\000\022\011\014\023\015\026\023\027\025\030" +
    "\022\031\032\032\024\033\031\001\002\000\006\002\ufff0" +
    "\035\ufff0\001\002\000\004\017\112\001\002\000\022\011" +
    "\014\023\015\026\023\027\025\030\022\031\032\032\024" +
    "\033\031\001\002\000\022\011\014\023\015\026\023\027" +
    "\025\030\022\031\032\032\024\033\031\001\002\000\022" +
    "\011\014\023\015\026\023\027\025\030\022\031\032\032" +
    "\024\033\031\001\002\000\022\011\014\023\015\026\023" +
    "\027\025\030\022\031\032\032\024\033\031\001\002\000" +
    "\004\017\103\001\002\000\004\017\073\001\002\000\004" +
    "\017\063\001\002\000\004\017\056\001\002\000\022\011" +
    "\014\023\015\026\023\027\025\030\022\031\032\032\024" +
    "\033\031\001\002\000\022\011\014\023\015\026\023\027" +
    "\025\030\022\031\032\032\024\033\031\001\002\000\006" +
    "\002\ufffd\035\ufffd\001\002\000\004\017\040\001\002\000" +
    "\004\017\035\001\002\000\022\011\014\023\015\026\023" +
    "\027\025\030\022\031\032\032\024\033\031\001\002\000" +
    "\006\002\ufff6\035\ufff6\001\002\000\004\040\036\001\002" +
    "\000\004\016\037\001\002\000\022\011\uffda\023\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\001\002" +
    "\000\004\014\041\001\002\000\004\010\042\001\002\000" +
    "\004\043\044\001\002\000\026\011\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\001\002\000\004\020\045\001\002\000\004\043\046" +
    "\001\002\000\004\011\047\001\002\000\006\015\051\020" +
    "\050\001\002\000\004\010\042\001\002\000\004\016\052" +
    "\001\002\000\026\011\uffe4\023\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\001\002" +
    "\000\026\011\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\001\002\000\006" +
    "\002\ufff3\035\ufff3\001\002\000\006\002\ufff2\035\ufff2\001" +
    "\002\000\006\036\060\037\057\001\002\000\004\016\062" +
    "\001\002\000\004\016\061\001\002\000\022\011\uffe2\023" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\001\002\000\022\011\uffe3\023\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\001\002\000\004\014\064" +
    "\001\002\000\004\043\065\001\002\000\006\015\070\020" +
    "\067\001\002\000\022\011\uffde\023\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\001\002\000\004\043" +
    "\065\001\002\000\004\016\071\001\002\000\022\011\uffdc" +
    "\023\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\001\002\000\022\011\uffdd\023\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\033\uffdd\001\002\000\004\014" +
    "\074\001\002\000\004\040\075\001\002\000\006\015\100" +
    "\020\077\001\002\000\022\011\uffe1\023\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\001\002\000\004" +
    "\040\075\001\002\000\004\016\101\001\002\000\022\011" +
    "\uffdf\023\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\001\002\000\022\011\uffe0\023\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\001\002\000\004" +
    "\043\104\001\002\000\004\016\105\001\002\000\022\011" +
    "\uffdb\023\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\033\uffdb\001\002\000\006\002\ufff1\035\ufff1\001\002\000" +
    "\006\002\ufff4\035\ufff4\001\002\000\006\002\ufff7\035\ufff7" +
    "\001\002\000\006\002\ufff5\035\ufff5\001\002\000\004\040" +
    "\113\001\002\000\004\016\114\001\002\000\026\011\uffef" +
    "\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031" +
    "\uffef\032\uffef\033\uffef\001\002\000\014\011\117\023\015" +
    "\024\122\025\121\033\031\001\002\000\014\011\117\023" +
    "\015\024\122\025\121\033\031\001\002\000\006\002\ufff8" +
    "\035\ufff8\001\002\000\014\011\117\023\015\024\122\025" +
    "\121\033\031\001\002\000\004\017\140\001\002\000\004" +
    "\017\130\001\002\000\014\011\117\023\015\024\122\025" +
    "\121\033\031\001\002\000\014\011\117\023\015\024\122" +
    "\025\121\033\031\001\002\000\006\002\ufffe\035\ufffe\001" +
    "\002\000\006\002\ufffa\035\ufffa\001\002\000\006\002\ufff9" +
    "\035\ufff9\001\002\000\004\014\131\001\002\000\004\040" +
    "\133\001\002\000\014\011\uffee\023\uffee\024\uffee\025\uffee" +
    "\033\uffee\001\002\000\006\015\135\020\134\001\002\000" +
    "\004\040\133\001\002\000\004\016\136\001\002\000\014" +
    "\011\uffec\023\uffec\024\uffec\025\uffec\033\uffec\001\002\000" +
    "\014\011\uffed\023\uffed\024\uffed\025\uffed\033\uffed\001\002" +
    "\000\004\014\141\001\002\000\010\012\145\041\150\043" +
    "\142\001\002\000\016\004\uffd1\005\uffd1\006\uffd1\007\uffd1" +
    "\013\uffd1\016\uffd1\001\002\000\014\011\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\033\uffeb\001\002\000\012\012\uffd8\015\uffd8" +
    "\020\uffd8\043\uffd8\001\002\000\006\012\145\043\142\001" +
    "\002\000\012\012\145\015\171\020\167\043\142\001\002" +
    "\000\014\004\155\005\157\006\161\007\160\016\uffd7\001" +
    "\002\000\006\015\152\020\151\001\002\000\010\012\145" +
    "\041\150\043\142\001\002\000\004\016\153\001\002\000" +
    "\014\011\uffe8\023\uffe8\024\uffe8\025\uffe8\033\uffe8\001\002" +
    "\000\014\011\uffea\023\uffea\024\uffea\025\uffea\033\uffea\001" +
    "\002\000\006\012\145\043\142\001\002\000\004\016\165" +
    "\001\002\000\006\012\145\043\142\001\002\000\006\012" +
    "\145\043\142\001\002\000\006\012\145\043\142\001\002" +
    "\000\016\004\uffd3\005\uffd3\006\uffd3\007\uffd3\013\uffd3\016" +
    "\uffd3\001\002\000\016\004\uffd2\005\uffd2\006\uffd2\007\uffd2" +
    "\013\uffd2\016\uffd2\001\002\000\016\004\uffd5\005\uffd5\006" +
    "\161\007\160\013\uffd5\016\uffd5\001\002\000\012\012\uffd6" +
    "\015\uffd6\020\uffd6\043\uffd6\001\002\000\016\004\uffd4\005" +
    "\uffd4\006\161\007\160\013\uffd4\016\uffd4\001\002\000\010" +
    "\012\145\041\150\043\142\001\002\000\012\012\uffd9\015" +
    "\uffd9\020\uffd9\043\uffd9\001\002\000\004\016\172\001\002" +
    "\000\014\011\uffe7\023\uffe7\024\uffe7\025\uffe7\033\uffe7\001" +
    "\002\000\014\011\uffe9\023\uffe9\024\uffe9\025\uffe9\033\uffe9" +
    "\001\002\000\014\004\155\005\157\006\161\007\160\013" +
    "\175\001\002\000\016\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\013\uffd0\016\uffd0\001\002\000\006\002\ufffc\035\ufffc\001" +
    "\002\000\006\002\ufffb\035\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\004\020\004\001\001\000\004\021\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\011\001\001\000\002\001" +
    "\001\000\022\002\020\003\025\010\017\012\016\013\032" +
    "\015\015\017\026\023\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\002\020\003\025\010\017\012\016" +
    "\013\032\015\015\017\026\023\110\001\001\000\022\002" +
    "\020\003\025\010\017\012\016\013\032\015\015\017\026" +
    "\023\107\001\001\000\022\002\020\003\025\010\017\012" +
    "\016\013\032\015\015\017\026\023\106\001\001\000\022" +
    "\002\020\003\025\010\017\012\016\013\032\015\015\017" +
    "\026\023\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\020\003" +
    "\025\010\017\012\016\013\032\015\015\017\026\023\054" +
    "\001\001\000\022\002\020\003\025\010\017\012\016\013" +
    "\032\015\015\017\026\023\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\020\003" +
    "\025\010\017\012\016\013\032\015\015\017\026\023\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\123\004\117\006\115\010\122\022" +
    "\124\001\001\000\014\002\123\004\117\006\115\010\122" +
    "\022\176\001\001\000\002\001\001\000\014\002\123\004" +
    "\117\006\115\010\122\022\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\123\004\117\006\115\010" +
    "\122\022\126\001\001\000\014\002\123\004\117\006\115" +
    "\010\122\022\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\142\024\145\025" +
    "\143\026\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\173\001\001\000\006\025" +
    "\167\026\146\001\001\000\004\027\155\001\001\000\002" +
    "\001\001\000\012\007\153\024\145\025\143\026\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\165\001\001\000\002\001\001\000\004\026" +
    "\163\001\001\000\004\026\162\001\001\000\004\026\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\172" +
    "\024\145\025\143\026\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	//setear el analizador lexico aqui:
	private Symbol s;
	GeneradorDeGrafica generador = new GeneradorDeGrafica();
	public Parser(Lexer lexer){
		super(lexer);
	}
	public Symbol getS(){
        	return this.s;
	}
	
	public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("Error, posicion incorrecta, se encontro:" + sym.terminalNames[cur_token.sym] + cur_token.toString());
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.out.println("public void unrecoveredsyntax_error");
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


	//poner codigo para realizar acciones

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S1A EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S1A ::= DEF S2A S1A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S1A",14, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S1A ::= DEF S2A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S1A",14, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S2A ::= BARRAS OPENBRACE S3A 
            {
              Object RESULT =null;
		generador.setTipoBarras();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S2A",15, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S2A ::= PIE OPENBRACE S5A 
            {
              Object RESULT =null;
		generador.setTipoPie();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S2A",15, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S3A ::= EX S3A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S3A",16, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S3A ::= EY S3A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S3A",16, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S3A ::= T S3A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S3A",16, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S3A ::= U S3A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S3A",16, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S3A ::= CLOSEBRACE 
            {
              Object RESULT =null;
		generador.create();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S3A",16, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // S5A ::= TP S5A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S5A",17, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S5A ::= EE S5A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S5A",17, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S5A ::= V S5A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S5A",17, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S5A ::= U S5A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S5A",17, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // S5A ::= EXT S5A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S5A",17, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // S5A ::= TTL S5A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S5A",17, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // S5A ::= T S5A 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S5A",17, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // S5A ::= CLOSEBRACE 
            {
              Object RESULT =null;
		generador.create();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S5A",17, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // T ::= TITULO COLON IDENTIFICADOR SEMICOLON 
            {
              Object RESULT =null;
		int titleleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int titleright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String title = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		generador.setTitulo(title);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",0, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EX ::= EJEX COLON OPENBRACKET S6 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EX",2, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // S6 ::= IDENTIFICADOR COMA S6 
            {
              Object RESULT =null;
		int idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		generador.addXElement(id);
                generador.setTipoBarras();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S6",3, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // S6 ::= IDENTIFICADOR CLOSEBRACKET SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		generador.addXElement(id);
                generador.setTipoBarras();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S6",3, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EY ::= EJEY COLON OPENBRACKET S7 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EY",4, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // S7 ::= DECIMAL COMA S7 
            {
              Object RESULT =null;
		int decimalleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decimalright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String decimal = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		generador.addYElement(decimal);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S7",5, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // S7 ::= expr_list COMA S7 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		generador.addYElement(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S7",5, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // S7 ::= DECIMAL CLOSEBRACKET SEMICOLON 
            {
              Object RESULT =null;
		int decimalleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decimalright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String decimal = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		generador.addYElement(decimal);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S7",5, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // S7 ::= expr_list CLOSEBRACKET SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		generador.addYElement(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S7",5, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // U ::= UNIR COLON OPENBRACKET S8 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("U",6, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // S8 ::= OPENBRACE NUMERO COMA NUMERO CLOSEBRACE COMA S8 
            {
              Object RESULT =null;
		int xleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String x = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int yleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String y = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		generador.addUnion(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S8",7, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // S8 ::= OPENBRACE NUMERO COMA NUMERO CLOSEBRACE CLOSEBRACKET SEMICOLON 
            {
              Object RESULT =null;
		int xleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String x = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int yleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String y = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		generador.addUnion(x,y);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S8",7, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TP ::= TIPO COLON CANTIDAD SEMICOLON 
            {
              Object RESULT =null;
		generador.setTipoCantidad();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TP",8, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TP ::= TIPO COLON PORCENTAJE SEMICOLON 
            {
              Object RESULT =null;
		generador.setTipoPorcentaje();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TP",8, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EE ::= TAG COLON OPENBRACKET S9 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EE",9, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // S9 ::= IDENTIFICADOR COMA S9 
            {
              Object RESULT =null;
		int tagleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tagright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String tag = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		generador.addTag(tag);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S9",10, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // S9 ::= IDENTIFICADOR CLOSEBRACKET SEMICOLON 
            {
              Object RESULT =null;
		int tagleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tagright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String tag = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		generador.addTag(tag);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S9",10, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // V ::= VALORES COLON OPENBRACKET S10 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("V",11, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // S10 ::= NUMERO COMA S10 
            {
              Object RESULT =null;
		int valleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		generador.addValue(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S10",12, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // S10 ::= NUMERO CLOSEBRACKET SEMICOLON 
            {
              Object RESULT =null;
		int valleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		generador.addValue(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("S10",12, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TTL ::= TOTAL COLON NUMERO SEMICOLON 
            {
              Object RESULT =null;
		int valleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String val = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		generador.setTotal(val);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TTL",1, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXT ::= EXTRA COLON IDENTIFICADOR SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		generador.setExtraName(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXT",13, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr_list ::= expr_list expr_part 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",18, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr_list ::= expr_part 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",18, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$0 ::= 
            {
              String RESULT =null;
		int eleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((Symbol) CUP$Parser$stack.peek()).value;
 System.out.println("= " + e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",21, ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr_part ::= expr NT$0 SEMICOLON 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_part",19, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr SUMA expr 
            {
              String RESULT =null;
		int e1left = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1+e2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr RESTA expr 
            {
              String RESULT =null;
		int e1left = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = e1+e2 ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr MULTI expr 
            {
              String RESULT =null;
		int e1left = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = e1+e2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr DIV expr 
            {
              String RESULT =null;
		int e1left = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1+e2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= NUMERO 
            {
              String RESULT =null;
		int nleft = ((Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((Symbol)CUP$Parser$stack.peek()), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= OPENPAR expr CLOSEPAR 
            {
              String RESULT =null;
		int eleft = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

    public GeneradorDeGrafica getGenerador() {
        return generador;
    }

    public void setGenerador(GeneradorDeGrafica generador) {
        this.generador = generador;
    }

}
